//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/Test Input Action.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Test Input Action"",
    ""maps"": [
        {
            ""name"": ""Test_Control_Map"",
            ""id"": ""ea1b307e-726d-460c-a48c-2e31c24d16d7"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""df9e0e04-c160-40ad-9d84-d90af42b9782"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""f0b47211-a52d-48e9-a761-79647312efac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""373576d5-43ba-48da-b9c0-9ec541c7dd19"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DoubleTapSlam"",
                    ""type"": ""Button"",
                    ""id"": ""d7fcfb10-0675-4ca2-aad5-ac5f10c82dbb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14952f8b-8528-4d00-85f4-0da44a583b2b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e993d7d2-69fb-4ebc-a86a-242cd82595b4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4d11d197-ae23-45be-9cc2-18afee929202"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3e8dedd6-fe8a-4575-a87e-3f8f75ce2629"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5ee46707-8e8b-4d8e-b28f-f533a50a38a5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3644406e-2570-4254-89bc-001f68cbe4d3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DoubleTapSlam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Test_Control_Map
        m_Test_Control_Map = asset.FindActionMap("Test_Control_Map", throwIfNotFound: true);
        m_Test_Control_Map_Jump = m_Test_Control_Map.FindAction("Jump", throwIfNotFound: true);
        m_Test_Control_Map_Move = m_Test_Control_Map.FindAction("Move", throwIfNotFound: true);
        m_Test_Control_Map_Interact = m_Test_Control_Map.FindAction("Interact", throwIfNotFound: true);
        m_Test_Control_Map_DoubleTapSlam = m_Test_Control_Map.FindAction("DoubleTapSlam", throwIfNotFound: true);
    }

    ~@TestInputAction()
    {
        UnityEngine.Debug.Assert(!m_Test_Control_Map.enabled, "This will cause a leak and performance issues, TestInputAction.Test_Control_Map.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Test_Control_Map
    private readonly InputActionMap m_Test_Control_Map;
    private List<ITest_Control_MapActions> m_Test_Control_MapActionsCallbackInterfaces = new List<ITest_Control_MapActions>();
    private readonly InputAction m_Test_Control_Map_Jump;
    private readonly InputAction m_Test_Control_Map_Move;
    private readonly InputAction m_Test_Control_Map_Interact;
    private readonly InputAction m_Test_Control_Map_DoubleTapSlam;
    public struct Test_Control_MapActions
    {
        private @TestInputAction m_Wrapper;
        public Test_Control_MapActions(@TestInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Test_Control_Map_Jump;
        public InputAction @Move => m_Wrapper.m_Test_Control_Map_Move;
        public InputAction @Interact => m_Wrapper.m_Test_Control_Map_Interact;
        public InputAction @DoubleTapSlam => m_Wrapper.m_Test_Control_Map_DoubleTapSlam;
        public InputActionMap Get() { return m_Wrapper.m_Test_Control_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Test_Control_MapActions set) { return set.Get(); }
        public void AddCallbacks(ITest_Control_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @DoubleTapSlam.started += instance.OnDoubleTapSlam;
            @DoubleTapSlam.performed += instance.OnDoubleTapSlam;
            @DoubleTapSlam.canceled += instance.OnDoubleTapSlam;
        }

        private void UnregisterCallbacks(ITest_Control_MapActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @DoubleTapSlam.started -= instance.OnDoubleTapSlam;
            @DoubleTapSlam.performed -= instance.OnDoubleTapSlam;
            @DoubleTapSlam.canceled -= instance.OnDoubleTapSlam;
        }

        public void RemoveCallbacks(ITest_Control_MapActions instance)
        {
            if (m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITest_Control_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Test_Control_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Test_Control_MapActions @Test_Control_Map => new Test_Control_MapActions(this);
    public interface ITest_Control_MapActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnDoubleTapSlam(InputAction.CallbackContext context);
    }
}
